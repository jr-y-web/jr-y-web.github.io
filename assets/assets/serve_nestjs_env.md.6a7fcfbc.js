import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"Nest.js 环境变量配置","description":"","frontmatter":{},"headers":[],"relativePath":"serve/nestjs/env.md","filePath":"serve/nestjs/env.md"}'),o={name:"serve/nestjs/env.md"},p=l(`<h1 id="nest-js-环境变量配置" tabindex="-1">Nest.js 环境变量配置 <a class="header-anchor" href="#nest-js-环境变量配置" aria-label="Permalink to &quot;Nest.js 环境变量配置&quot;">​</a></h1><p>在前端项目中，经常需要使用到项目当前的环境变量。同理的在 Nest.js 中也可以使用环境变量，而且 Nest.js 已经集成了这一块的配置。 要使用环境变量的话，需要安装<code>@nestjs/config</code>依赖库。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pnpm i @nestjs</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">config</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pnpm i @nestjs</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">config</span></span></code></pre></div><p>现在创建一个<code>.env</code>的环境变量配置文件，随便写入一些信息：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">DB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mysql&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">DB_HOST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;127:0:0:3060&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">DB</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mysql&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">DB_HOST</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;127:0:0:3060&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然后，只需要在对应的模块中引入<code>@nestjs/config</code>的<code>ConfigModule</code>，同时注入到<code>imports</code>中，即可完成对环境变量功能的装载。（envFilePath 为环境变量的文件名，框架会自动去根目录查找）</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 拿user.module.ts为例</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/common&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserController } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./user.controller&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./user.service&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/config&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserController,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      envFilePath: </span><span style="color:#9ECBFF;">&quot;.env&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 拿user.module.ts为例</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/common&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserController } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./user.controller&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./user.service&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/config&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [</span></span>
<span class="line"><span style="color:#24292E;">    UserController,</span></span>
<span class="line"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      envFilePath: </span><span style="color:#032F62;">&quot;.env&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>获取环境变量，只需要在对应的<code>model</code>中的<code>controller</code>中引入<code>@nestjs/config</code>的<code>ConfigServe</code>即可，那么后面就可以在类中<code>constructor</code>初始化即可。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// user.controller.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Controller, Get, Post } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/common&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./user.service&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@nestjs/config&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">userService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserService</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">configService</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ConfigService</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#B392F0;">Get</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.ConfigService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;DB&#39;</span><span style="color:#E1E4E8;">))  </span><span style="color:#6A737D;">// log --&gt; mysql</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userService.</span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#B392F0;">Post</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/add&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addUser</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.userService.</span><span style="color:#B392F0;">addUser</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;">// user.controller.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Controller, Get, Post } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/common&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./user.service&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@nestjs/config&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Controller</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;user&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserController</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">userService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserService</span><span style="color:#24292E;">,</span></span>
<span class="line highlighted"><span style="color:#24292E;">        </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#E36209;">configService</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ConfigService</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ) { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">Get</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> {</span></span>
<span class="line highlighted"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.ConfigService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;DB&#39;</span><span style="color:#24292E;">))  </span><span style="color:#6A737D;">// log --&gt; mysql</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userService.</span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#6F42C1;">Post</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/add&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">addUser</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.userService.</span><span style="color:#6F42C1;">addUser</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>当然的，这里稍微一般来说，使用枚举会显得代码专业很多，创建一个枚举类，把环境变量的键写入到枚举中，然后改写上述的例子；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//emum/config.emum</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configEmum</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DB&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">DB_HOST</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;DB_HOST&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//emum/config.emum</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configEmum</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DB</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DB&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">DB_HOST</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;DB_HOST&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>然后引入即可完成使用</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { configEmum } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;../emum/config.emum&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.configService.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(configEmum.</span><span style="color:#79B8FF;">DB</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { configEmum } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;../emum/config.emum&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.configService.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(configEmum.</span><span style="color:#005CC5;">DB</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="环境变量的全局使用" tabindex="-1">环境变量的全局使用 <a class="header-anchor" href="#环境变量的全局使用" aria-label="Permalink to &quot;环境变量的全局使用&quot;">​</a></h2><p>当然的，现在这个环境变量还<strong>只是</strong>局部使用，比如说有另一个叫 game 的模块，<code>game.controller</code>无法引入<code>ConfigService</code>来获取环境变量，因为它没有在<code>game.moduel.ts</code>引入<code>ConfigModule</code>进行模块注入，所以如果想要全局，我们需要在根模块(<code>app.module.ts</code>)中引入<code>ConfigModule</code>，同时<code>ConfigModule.forRoot</code>把里面的变量<code>isGlobal</code>置为<code>true</code>，那么这个时候环境变量将可以在任意模块中引入<code>ConfigService</code>进行获取。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/common&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserController } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./user/user.controller&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./user/user.module&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { UserService } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./user/user.service&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/config&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    UserModule,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      envFilePath: </span><span style="color:#9ECBFF;">&quot;.env&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [UserController],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/common&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserController } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./user/user.controller&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./user/user.module&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { UserService } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./user/user.service&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/config&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    UserModule,</span></span>
<span class="line highlighted"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      envFilePath: </span><span style="color:#032F62;">&quot;.env&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [UserController],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [UserService],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h2 id="根据不同的环境-使用不同的环境变量" tabindex="-1">根据不同的环境，使用不同的环境变量 <a class="header-anchor" href="#根据不同的环境-使用不同的环境变量" aria-label="Permalink to &quot;根据不同的环境，使用不同的环境变量&quot;">​</a></h2><p>要想实现不同环境模式使用不同的环境变量，那必然需要在运行阶段传入特定的 key 让代码知道该用什么环境变量，这里采用<code>cross-env</code>库进行操作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pnpm i cross</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">env</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pnpm i cross</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">env</span></span></code></pre></div><p>然后就可以在<code>package.json</code>命令中写入环境变量参数</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;start:dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=development nest build --webpack --webpackPath webpack-hmr.config.js --watch&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;start:prod&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=production node dist/main&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;start:dev&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=development nest build --webpack --webpackPath webpack-hmr.config.js --watch&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;start:prod&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;cross-env NODE_ENV=production node dist/main&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span></code></pre></div><p>ok，那么现在可以通过<code>p<wbr>rocess.env.NODE_ENV</code>来获取当前的环境，举个例子创建<code>.env.development</code>与<code>.env.production</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 拿app.module.ts 举例</span></span>
<span class="line highlighted"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">envFilePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`.env.\${</span><span style="color:#E1E4E8;">process</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">env</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;development&quot;}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// log  ---&gt;   根据上述配置，start:dev会log.env.development, prod 则是 .env.production</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      envFilePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 拿app.module.ts 举例</span></span>
<span class="line highlighted"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">envFilePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`.env.\${</span><span style="color:#24292E;">process</span><span style="color:#032F62;">.</span><span style="color:#24292E;">env</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&quot;development&quot;}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// log  ---&gt;   根据上述配置，start:dev会log.env.development, prod 则是 .env.production</span></span>
<span class="line highlighted"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      envFilePath,</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h2 id="合并环境变量" tabindex="-1">合并环境变量 <a class="header-anchor" href="#合并环境变量" aria-label="Permalink to &quot;合并环境变量&quot;">​</a></h2><p>假设现在有好几个环境，那么不同环境中就要写不同的环境变量，但当有一些变量是每个环境中都是一样的情况该如何？ Nestjs 这里集成了默认配置的设置 load（它接受一个回调函数，回调函数需要键值对），它会在原有使用的环境变量中，叠加设置的环境变量参数。如果当前的环境变量参数有叠加的环境变量参数，那么它会忽视掉叠加的环境变量参数。 这里同时引入<code>dotenv</code>库来解析<code>.env</code>文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark has-highlighted-lines vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// app.moduel.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Module } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/common&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConfigModule } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@nestjs/config&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> dotenv </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;dotenv&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">envFilePath</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`.env.\${</span><span style="color:#E1E4E8;">process</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">env</span><span style="color:#9ECBFF;">.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#9ECBFF;"> </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> </span><span style="color:#9ECBFF;">&quot;development&quot;}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      envFilePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">      load: [() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> dotenv.</span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">({ path: </span><span style="color:#9ECBFF;">&quot;.env&quot;</span><span style="color:#E1E4E8;"> })], </span><span style="color:#6A737D;">// 假设.env有DB_hrl ,其他环境变量文件没有，那么它就会叠加到当前环境变量。反之则忽略。</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  controllers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  providers: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AppModule</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light has-highlighted-lines vp-code-light"><code><span class="line"><span style="color:#6A737D;">// app.moduel.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Module } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/common&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConfigModule } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@nestjs/config&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line highlighted"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> dotenv </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;dotenv&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">envFilePath</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`.env.\${</span><span style="color:#24292E;">process</span><span style="color:#032F62;">.</span><span style="color:#24292E;">env</span><span style="color:#032F62;">.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#032F62;"> </span><span style="color:#D73A49;">||</span><span style="color:#032F62;"> </span><span style="color:#032F62;">&quot;development&quot;}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  imports: [</span></span>
<span class="line"><span style="color:#24292E;">    ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      envFilePath,</span></span>
<span class="line"><span style="color:#24292E;">      load: [() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> dotenv.</span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&quot;.env&quot;</span><span style="color:#24292E;"> })], </span><span style="color:#6A737D;">// 假设.env有DB_hrl ,其他环境变量文件没有，那么它就会叠加到当前环境变量。反之则忽略。</span></span>
<span class="line"><span style="color:#24292E;">    }),</span></span>
<span class="line"><span style="color:#24292E;">  ],</span></span>
<span class="line"><span style="color:#24292E;">  controllers: [],</span></span>
<span class="line"><span style="color:#24292E;">  providers: [],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AppModule</span><span style="color:#24292E;"> {}</span></span></code></pre></div><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>搞错数据库是一个顶级大问题，日常工作中难免有概率错改环境配置文件里面的参数，为了防止这种这种 Nest 支持在传进环境变量中校验环境变量是否正常，官方这里推荐是使用<code>joi</code>库来操作。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">pnpm i joi</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">pnpm i joi</span></span></code></pre></div><p>然后还是找到<code>ConfigModule.forRoot</code>，这里其中有<code>validationSchema</code>属性，举个例子，用最上述的<code>.env</code>文件为例子，项目所使用的环境变量必须是<code>mysql</code>或者<code>mongodb</code>，那么就可以这样设置：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// app.momdule.ts</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#B392F0;">Module</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    imports: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        UserModule,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ConfigModule.</span><span style="color:#B392F0;">forRoot</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">            isGlobal: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            envFilePath,</span></span>
<span class="line"><span style="color:#E1E4E8;">            load: [() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> dotenv.</span><span style="color:#B392F0;">config</span><span style="color:#E1E4E8;">({ path: </span><span style="color:#9ECBFF;">&#39;.env&#39;</span><span style="color:#E1E4E8;"> })],</span></span>
<span class="line"><span style="color:#E1E4E8;">            validationSchema: joi.</span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">                DB: joi.</span><span style="color:#B392F0;">string</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">valid</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mongodb&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mysql&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            }),</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    controllers: [UserController],</span></span>
<span class="line"><span style="color:#E1E4E8;">    providers: [UserService],</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// app.momdule.ts</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#6F42C1;">Module</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    imports: [</span></span>
<span class="line"><span style="color:#24292E;">        UserModule,</span></span>
<span class="line"><span style="color:#24292E;">        ConfigModule.</span><span style="color:#6F42C1;">forRoot</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">            isGlobal: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            envFilePath,</span></span>
<span class="line"><span style="color:#24292E;">            load: [() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> dotenv.</span><span style="color:#6F42C1;">config</span><span style="color:#24292E;">({ path: </span><span style="color:#032F62;">&#39;.env&#39;</span><span style="color:#24292E;"> })],</span></span>
<span class="line"><span style="color:#24292E;">            validationSchema: joi.</span><span style="color:#6F42C1;">object</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">                DB: joi.</span><span style="color:#6F42C1;">string</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">valid</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mysql&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;mongodb&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;mysql&#39;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            }),</span></span>
<span class="line"><span style="color:#24292E;">        }),</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    controllers: [UserController],</span></span>
<span class="line"><span style="color:#24292E;">    providers: [UserService],</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>上述例子断言了环境参数 DB 必须是字符串，且是<code>mysql</code>或者<code>mongodb</code> ，默认是<code>mysql</code>， 当然 joi 也有很多判断方式，比如<code>joi.number</code>等等，这需要查阅 <a href="https://joi.dev/api/?v=17.9.1" target="_blank" rel="noreferrer">joi</a> 的官方文档。</p>`,32),e=[p];function c(t,r,E,y,i,d){return n(),a("div",null,e)}const g=s(o,[["render",c]]);export{u as __pageData,g as default};
