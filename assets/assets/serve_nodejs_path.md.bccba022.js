import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"核心模块 node:path","description":"","frontmatter":{},"headers":[],"relativePath":"serve/nodejs/path.md","filePath":"serve/nodejs/path.md"}'),p={name:"serve/nodejs/path.md"},l=o(`<h1 id="核心模块-node-path" tabindex="-1">核心模块 node:path <a class="header-anchor" href="#核心模块-node-path" aria-label="Permalink to &quot;核心模块 node:path&quot;">​</a></h1><p>node:path 模块提供了用于处理文件和目录的路径的实用工具。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;node:path&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;node:path&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>当然，<code>package.json</code> 中如果是 esm 规则<code>&quot;type&quot;: &quot;module&quot;</code>则</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> path </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;node:path&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> path </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;node:path&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="什么是-posix" tabindex="-1">什么是 POSIX <a class="header-anchor" href="#什么是-posix" aria-label="Permalink to &quot;什么是 POSIX&quot;">​</a></h2><p>在使用<code>path</code>前要先理解不同平台的一个机制，比如经典就是 Windows 和 Mac (Posix)的区别：<code>posix（Portable Operating System Interface of UNIX</code>,posix 表示可移植操作系统接口，也就是定义了一套标准，遵守这套标准的操作系统有(unix,like unix,linux,macOs,windows wsl)，为什么要定义这套标准，比如在 Linux 系统启动一个进程需要调用 fork 函数,在 windows 启动一个进程需要调用 creatprocess 函数，这样就会有问题，比如我在 linux 写好了代码，需要移植到 windows 发现函数不统一，posix 标准的出现就是为了解决这个问题。</p><p>但是<code>Windows</code>因为历史原因，它并没有完全遵守<code>posix</code> 标准, Windows 在设计采用了和<code>posix</code>不同的路径表示规则(<s>当前它现在也兼容了</s>)。 譬如在<code>Windows</code>系统中，使用反斜杠（<code>\\</code>）作为路径分隔符。这与 POSIX 系统使用的正斜杠（<code>/</code>）是不同的。</p><h2 id="path-对-windows-与-posix-的差异化" tabindex="-1">path 对 Windows 与 POSIX 的差异化 <a class="header-anchor" href="#path-对-windows-与-posix-的差异化" aria-label="Permalink to &quot;path 对 Windows 与 POSIX 的差异化&quot;">​</a></h2><p>node:path 模块的默认操作因运行 Node.js 应用程序的操作系统而异。 具体来说，当在 <code>Windows</code> 操作系统上运行时，<code>node:path</code> 模块将假定正在使用 <code>Windows</code> 风格的路径。 因此，在 <code>POSIX</code> 和 <code>Windows</code> 上使用 <code>path.basename()</code> 等一系列方法可能会产生不同的结果，譬如 mac 下的路径是&#39;<code>/</code>&#39;，而<code>Windows</code>则两者都可以兼容。所以 path 的方法中可以通过<code>path.win32</code> 和 <code>path.posix</code>来操作,比如现在就有需求要在 mac 电脑中去解析<code>Windows</code>的路径（ps. 现实的需求还是很魔幻的），那么就可以使用在 path 后面跟上对应的平台方法；</p><ul><li>当使用 <code>Windows</code> 文件路径时，若要在任何操作系统上获得一致的结果，则使用 <code>path.win32</code></li><li>当使用 <code>POSIX</code> 文件路径时，若要在任何操作系统上获得一致的结果，则使用 <code>path.posix</code></li></ul><h2 id="path-basename-path-ext" tabindex="-1">path.basename(path[, ext]) <a class="header-anchor" href="#path-basename-path-ext" aria-label="Permalink to &quot;path.basename(path[, ext])&quot;">​</a></h2><ul><li>path <code>&lt;string&gt;</code></li><li>ext <code>&lt;string&gt;</code> 可选的文件扩展名</li><li>@return <code>&lt;string&gt;</code></li></ul><p>path.basename()方法是返回<code>path</code>的最后一部分，同时尾随的目录分隔符被忽略（说的是<code>&#39;\\&#39;</code>或者<code>&#39;/&#39;</code>）, 可选参数<code>ext</code>则是返回的基础上在扩展名剔除<code>ext</code>，比如说 <code>path.basename(path,&#39;.html&#39;)</code>，那么 path 的扩展名要是<code>.html</code>则会被剔除后返回，比如我们举个例子；</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//举个例子</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误.md</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//举个例子</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误.md</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误</span></span></code></pre></div><p>当然就像之前所说的，mac（遵守 posix 的系统）并不能解析 Winodows 的路径，当使用 Windows 文件路径时，若要在任何操作系统上获得一致的结果，则使用 <code>path.win32</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.win32.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;D://filmReview//上帝的笔误.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.win32.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D://filmReview//上帝的笔误.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 上帝的笔误.md</span></span></code></pre></div><p>特别的，Windows 不区分大小写的方式处理文件名（包括文件扩展名），但<code>basename</code>不会如此，该方法还是会认为不同大小写的扩展名属于不同文件，比如说我们拿 index.html 与 index.HTML 举个例子，它们两个其实指同一个文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.win32.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;D://filmReview//index.html&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.html&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回index</span></span>
<span class="line"><span style="color:#E1E4E8;">path.win32.</span><span style="color:#B392F0;">basename</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;D://filmReview//index.HTML&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;.html&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回index.HTML</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.win32.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D://filmReview//index.html&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.html&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回index</span></span>
<span class="line"><span style="color:#24292E;">path.win32.</span><span style="color:#6F42C1;">basename</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;D://filmReview//index.HTML&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;.html&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回index.HTML</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>若传进来的<code>path</code>不是字符串的话，该方法会报错。</p></div><h2 id="path-dirname-path" tabindex="-1">path.dirname(path) <a class="header-anchor" href="#path-dirname-path" aria-label="Permalink to &quot;path.dirname(path)&quot;">​</a></h2><ul><li>path <code>&lt;string&gt;</code> 路径字符串</li></ul><p><code>path.dirname</code>方法和<code>path.basename</code> 方法为互补关系， path.basename()方法是返回<code>path</code>的最后一部分, 而 path.dirname()则返回<code>path</code>的目录名, 同时尾随的目录分隔符被忽略。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">dirname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 filmReview</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">dirname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/filmReview/上帝的笔误.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 filmReview</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>若传进来的<code>path</code>不是字符串的话，该方法会报错。</p></div><h2 id="paath-extname-path" tabindex="-1">paath.extname(path) <a class="header-anchor" href="#paath-extname-path" aria-label="Permalink to &quot;paath.extname(path)&quot;">​</a></h2><ul><li>path <code>&lt;string&gt;</code> 路径字符串</li></ul><p><code>path.extname</code> 则返回传进来<code>path</code>路径字符串的文件的扩展名，它其实取是<code>path</code>的 U 最后一部分，从<code>.</code>字符到字符串的结尾，特别的，如果最后一部分没有<code>.</code>，或者除了 path 的基本名称的第一个字符之外没有<code>.</code>个字符，则返回空字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;index.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 .md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;lerna&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 空字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;koa2.js.app&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 .app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;nest.&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.index&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//返回空</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">extname</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.index.vue&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 .vue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;index.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 .md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;lerna&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 空字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;koa2.js.app&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 .app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;nest.&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.index&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//返回空</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">extname</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.index.vue&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 .vue</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>若传进来的<code>path</code>不是字符串的话，该方法会报错。</p></div><h2 id="path-join-paths" tabindex="-1">path.join([...paths]) <a class="header-anchor" href="#path-join-paths" aria-label="Permalink to &quot;path.join([...paths])&quot;">​</a></h2><ul><li>..paths 字符串序列，逗号隔开 <code>path.join</code> 方法是通过解析传进来的 paths，然后拼接成一个路径, 如果是零长度的 paths 片段的话会被忽略，如果连接的路径字符串是零长度字符串，则将返回 &#39;.&#39;，表示当前工作目录。</li><li>@return <code>&lt;string&gt;</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/lerna&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;index.md&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回   /lerna/index.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/lerna&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;index.md&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回   /lerna/index.md</span></span></code></pre></div><p>当然特别的，这里还支持<code>..</code> 和 <code>./</code> 的骚操作，举个例子,有下面例子可见，在拼接/c 的末端中，额外的让它返回上层，所以它最终就会输出/a/b</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/c&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;../&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返沪/a/b</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/c&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;../&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返沪/a/b</span></span></code></pre></div><h2 id="path-resolve-paths" tabindex="-1">path.resolve([...paths]) <a class="header-anchor" href="#path-resolve-paths" aria-label="Permalink to &quot;path.resolve([...paths])&quot;">​</a></h2><ul><li>...paths <code>&lt;string&gt;</code> 路径或路径片段的序列</li><li>@return <code>&lt;string&gt;</code></li></ul><p><code>path.resolve</code>是将路径或者路径片段（逗号隔开）解析成一个<strong>绝对路径</strong>。 如果传入了多个绝对路径，那么只会返回尾部（最右边）的绝对路径。 特别的，它还具体以下规则：</p><ol><li>如果在处理完后传进来的参数<code>paths</code>后还不是一个绝对路径，那么它会返回当前处理的<strong>工作目录</strong></li><li>零长度的<code>path</code>会被无视</li><li>如果没有传入 path 片段,即<code>path.resolve()</code>就是返回<strong>当前工作目录的绝对路径</strong></li><li>生成的路径被规范化，并删除尾部斜杠，即 path.resolve(&#39;./index.js/&#39;) ==&gt; 工作目录/index.js</li><li>给定的路径序列从右到左处理，每个后续的 path 会被追加到前面，直到构建绝对路径。 例如，给定路径片段的序列：/foo、/bar、baz，调用 path.resolve(&#39;/foo&#39;, &#39;/bar&#39;, &#39;baz&#39;) 将返回 /bar/baz，因为 &#39;baz&#39; 不是绝对路径，而 &#39;/bar&#39; + &#39;/&#39; + &#39;baz&#39; 是。</li></ol><p>举个例子，注意当前为<code>mac</code>，windows 的路径会有不同。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 比如说传入了多个绝对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/a&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/b&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/games&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 /games</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 比如脚手架经常看到的  绝对路径 + 相对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;./nest.js&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回   工作目录/nest.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当然要达到上述的相同结果，直接只传入一个相对路径也是行的</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./nest.js&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回   工作目录/nest.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 工作目录/src</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 比如说传入了多个绝对路径</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/a&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/b&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/games&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 /games</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 比如脚手架经常看到的  绝对路径 + 相对路径</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;./nest.js&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回   工作目录/nest.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当然要达到上述的相同结果，直接只传入一个相对路径也是行的</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./nest.js&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回   工作目录/nest.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 返回 工作目录/src</span></span></code></pre></div><h2 id="path-sep" tabindex="-1">path.sep <a class="header-anchor" href="#path-sep" aria-label="Permalink to &quot;path.sep&quot;">​</a></h2><p><code>path.sep</code> 是提供特定平台的路径片段分割符</p><ul><li>Windows 上是 <code>\\</code></li><li>Posix 上是 <code>/</code></li></ul><p>举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// mac</span></span>
<span class="line"><span style="color:#E1E4E8;">path.sep; </span><span style="color:#6A737D;">// ---&gt;  &#39;/&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Window</span></span>
<span class="line"><span style="color:#E1E4E8;">path.sep; </span><span style="color:#6A737D;">// ----&gt; &#39;\\&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// mac</span></span>
<span class="line"><span style="color:#24292E;">path.sep; </span><span style="color:#6A737D;">// ---&gt;  &#39;/&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Window</span></span>
<span class="line"><span style="color:#24292E;">path.sep; </span><span style="color:#6A737D;">// ----&gt; &#39;\\&#39;</span></span></code></pre></div><h2 id="path-delimiter" tabindex="-1">path.delimiter <a class="header-anchor" href="#path-delimiter" aria-label="Permalink to &quot;path.delimiter&quot;">​</a></h2><p>提供特定于平台的路径定界符：</p><ul><li><code>;</code> 用于 windows</li><li><code>:</code> 用于 POSIX</li></ul><p>举个例子：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(path.delimiter); </span><span style="color:#6A737D;">// 打印  ---&gt;  mac 是 :  ， windows 是</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(path.delimiter); </span><span style="color:#6A737D;">// 打印  ---&gt;  mac 是 :  ， windows 是</span></span></code></pre></div><p>下面是官方案列:</p><ul><li>在 POSIX 上</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">PATH</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 打印: &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">p<wbr>rocess.env.</span><span style="color:#79B8FF;">PATH</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(path.delimiter);</span></span>
<span class="line"><span style="color:#6A737D;">// 返回: [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 打印: &#39;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p<wbr>rocess.env.</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(path.delimiter);</span></span>
<span class="line"><span style="color:#6A737D;">// 返回: [&#39;/usr/bin&#39;, &#39;/bin&#39;, &#39;/usr/sbin&#39;, &#39;/sbin&#39;, &#39;/usr/local/bin&#39;]</span></span></code></pre></div><ul><li>在 Windows 上</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p<wbr>rocess.env.</span><span style="color:#79B8FF;">PATH</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 打印: &#39;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">p<wbr>rocess.env.</span><span style="color:#79B8FF;">PATH</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(path.delimiter);</span></span>
<span class="line"><span style="color:#6A737D;">// 返回: [&#39;C:\\\\Windows\\\\system32&#39;, &#39;C:\\\\Windows&#39;, &#39;C:\\\\Program Files\\\\node\\\\&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(p<wbr>rocess.env.</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 打印: &#39;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\node\\&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p<wbr>rocess.env.</span><span style="color:#005CC5;">PATH</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(path.delimiter);</span></span>
<span class="line"><span style="color:#6A737D;">// 返回: [&#39;C:\\\\Windows\\\\system32&#39;, &#39;C:\\\\Windows&#39;, &#39;C:\\\\Program Files\\\\node\\\\&#39;]</span></span></code></pre></div><h2 id="path-isabsolute-path" tabindex="-1">path.isAbsolute(path) <a class="header-anchor" href="#path-isabsolute-path" aria-label="Permalink to &quot;path.isAbsolute(path)&quot;">​</a></h2><ul><li>path <code>&lt;string&gt;</code></li><li>@return <code>&lt;boolen&gt;</code></li></ul><p><code>path.isAbsolute</code> 方法确定<code>path</code>是否为绝对路径，如果给定的<code>path</code>是零长度的字符串，则直接返回 fasle</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 举个例子</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">isAbsolute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/film&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">isAbsolute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;film&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">isAbsolute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./film&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">isAbsolute</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;film/&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// false</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 举个例子</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">isAbsolute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/film&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">isAbsolute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;film&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">isAbsolute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./film&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">isAbsolute</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;film/&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h2 id="path-parse-path" tabindex="-1">path.parse(path) <a class="header-anchor" href="#path-parse-path" aria-label="Permalink to &quot;path.parse(path)&quot;">​</a></h2><ul><li>path <code>&lt;string&gt;</code></li><li>@return <code>Object</code></li></ul><p><code>path.parse</code> 与 <code>path.format</code> 正好为互补关系, <code>path.parse</code>方法根据传入的 path 字符串解析成一个<strong>路径对象</strong>，同时尾随的目录分隔符被忽略。</p><p>什么是路径对象？ 路径对象是指路径的各个组成部分，对象有<code>root</code>、 <code>dir</code> 、 <code>base</code> 、<code>ext</code>、<code>name</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/lerna/blog/config/index.md&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 上述log 为</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">root</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">dir</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;/lerna/blog/config&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">base</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;index.md&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">ext</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;.md&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;index&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/lerna/blog/config/index.md&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 上述log 为</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">root</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">dir</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;/lerna/blog/config&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">base</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;index.md&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">ext</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;.md&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;index&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>分别对应的含义为：</p><ul><li><code>root</code> 路径根目录，即<code>/</code></li><li><code>dir</code> 文件所在的目录，即<code>/</code></li><li><code>base</code> 文件名</li><li><code>ext</code> 文件扩展名</li><li><code>naem</code> 去除扩展名后的文件名</li></ul><h2 id="path-format-pathobject" tabindex="-1">path.format(pathObject) <a class="header-anchor" href="#path-format-pathobject" aria-label="Permalink to &quot;path.format(pathObject)&quot;">​</a></h2><p><code>path.format</code> 与 <code>path.parse</code> 正好为互补关系, <code>path.format</code> 是将路径对象转化为路径字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  root: </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  dir: </span><span style="color:#9ECBFF;">&quot;/lerna/blog/config&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  base: </span><span style="color:#9ECBFF;">&quot;index.md&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ext: </span><span style="color:#9ECBFF;">&quot;.md&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;index&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// log  ---- &gt;  /lerna/blog/config/index.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  root: </span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  dir: </span><span style="color:#032F62;">&quot;/lerna/blog/config&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  base: </span><span style="color:#032F62;">&quot;index.md&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ext: </span><span style="color:#032F62;">&quot;.md&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;index&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// log  ---- &gt;  /lerna/blog/config/index.md</span></span></code></pre></div><p>特别的，它还存在<strong>一个属性优先于另一个属性</strong>的规则；</p><ul><li>如果有对象里面有<code>dir</code>则会无视掉<code>root</code></li><li>如果有 base，则会无视掉<code>ext</code>于<code>name</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 举个例子</span></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  root: </span><span style="color:#9ECBFF;">&quot;/user&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 我乱写的加一个</span></span>
<span class="line"><span style="color:#E1E4E8;">  dir: </span><span style="color:#9ECBFF;">&quot;/lerna/blog/config&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  base: </span><span style="color:#9ECBFF;">&quot;index.md&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">//  log ----&gt; /lerna/blog/config/index.md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  dir: </span><span style="color:#9ECBFF;">&quot;/lerna/blog/config&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  base: </span><span style="color:#9ECBFF;">&quot;index.md&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ext: </span><span style="color:#9ECBFF;">&quot;.mp4&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;我乱起一个文件名&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}); </span><span style="color:#6A737D;">// log  ----&gt; /lerna/blog/config/index.md</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 举个例子</span></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  root: </span><span style="color:#032F62;">&quot;/user&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 我乱写的加一个</span></span>
<span class="line"><span style="color:#24292E;">  dir: </span><span style="color:#032F62;">&quot;/lerna/blog/config&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  base: </span><span style="color:#032F62;">&quot;index.md&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">//  log ----&gt; /lerna/blog/config/index.md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  dir: </span><span style="color:#032F62;">&quot;/lerna/blog/config&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  base: </span><span style="color:#032F62;">&quot;index.md&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ext: </span><span style="color:#032F62;">&quot;.mp4&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;我乱起一个文件名&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}); </span><span style="color:#6A737D;">// log  ----&gt; /lerna/blog/config/index.md</span></span></code></pre></div><h2 id="path-relative-from-to" tabindex="-1">path.relative(from, to) <a class="header-anchor" href="#path-relative-from-to" aria-label="Permalink to &quot;path.relative(from, to)&quot;">​</a></h2><ul><li>from <code>&lt;string&gt;</code> 起点路径字符串</li><li>to <code>&lt;string&gt;</code> 终点路径字符串</li><li>@return <code>&lt;string&gt;</code></li></ul><p><code>path.relative</code> 方法是根据工作目录解析传入的<code>form</code>起点路径到<code>to</code>终点路径的相对路径， 如果<code>from</code>和<code>to</code>都解析为相同的路径，则返回零长度字符串,如果零长度字符串作为 from 或 to 传入，则将使用当前工作目录而不是零长度字符串。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">path.</span><span style="color:#B392F0;">relative</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/a/b/test/aaa&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/a/b/blog/bbb&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// log -&gt; ../../blog/bbb</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">path.</span><span style="color:#6F42C1;">relative</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/a/b/test/aaa&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;/a/b/blog/bbb&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// log -&gt; ../../blog/bbb</span></span></code></pre></div>`,77),e=[l];function t(c,r,i,E,d,y){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{u as __pageData,F as default};
