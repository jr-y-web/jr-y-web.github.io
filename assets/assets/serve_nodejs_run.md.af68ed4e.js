import{_ as s,o as n,c as o,Q as a}from"./chunks/framework.01af844e.js";const q=JSON.parse('{"title":"npm run 原理","description":"","frontmatter":{},"headers":[],"relativePath":"serve/nodejs/run.md","filePath":"serve/nodejs/run.md"}'),t={name:"serve/nodejs/run.md"},e=a(`<h1 id="npm-run-原理" tabindex="-1">npm run 原理 <a class="header-anchor" href="#npm-run-原理" aria-label="Permalink to &quot;npm run 原理&quot;">​</a></h1><p>当在终端输入任何<code>npm run &lt;行为命令&gt;</code>的时候，npm 其实是去读取 package.json 的 script 对应脚本的命名，它遵寻下面规则：</p><ul><li>先从当前项目的 node_modules/.bin 去查找可执行命令</li><li>如果没找到就去全局的 node_modules 去找可执行命令</li><li>如果还没找到就去环境变量查找</li><li>再找不到就进行报错</li></ul><p>如果成功找到，一般.bin 文件会存在三个同名但不同后缀的文件,因为 node.js 是跨平台的，所以可执行命名兼容各个平台;</p><ul><li>sh 文件是给 Linux unix Macos 使用</li><li>cmd 给 windows 的 cmd 使用</li><li>ps1 给 windows 的 powerShell 使用</li></ul><h2 id="npm-生命周期" tabindex="-1">npm 生命周期 <a class="header-anchor" href="#npm-生命周期" aria-label="Permalink to &quot;npm 生命周期&quot;">​</a></h2><p>npm 的生命周期分为在 xx 命令之前和在 xx 命令之后，创建生命周期也非常简单，只需要在<code>package.json</code>的 script 中的命名前面加上<code>pre</code>（在之前） 与 <code>post</code>（在之后），这里来单元测试 test 命名举个例子：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;script&quot;</span><span style="color:#E1E4E8;"> : {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&quot;node test&quot;</span><span style="color:#E1E4E8;"> ,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;pretest&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;在执行test命令之前&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;posttest&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;在执行test命令之后&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;script&quot;</span><span style="color:#24292E;"> : {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;test&quot;</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&quot;node test&quot;</span><span style="color:#24292E;"> ,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;pretest&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;在执行test命令之前&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;posttest&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;在执行test命令之后&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span></code></pre></div>`,8),p=[e];function l(c,r,i,u,d,E){return n(),o("div",null,p)}const _=s(t,[["render",l]]);export{q as __pageData,_ as default};
